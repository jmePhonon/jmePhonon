apply plugin : 'java' 
apply plugin: 'eclipse'
import org.gradle.plugins.ide.eclipse.model.AccessRule


def jmerepo='com.github.jmonkeyengine.jMonkeyEngine'
def jmeversion='v3.2.0-stable'


eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('accessible', 'com/**'))
                jre.accessRules.add(new AccessRule('accessible', '**'))
                jre.accessRules.add(new AccessRule('accessible', 'sun/**'))           
             }
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    
}

dependencies {
    compile jmerepo + ':jme3-core:' + jmeversion
    compile jmerepo + ':jme3-desktop:' + jmeversion
    compile jmerepo + ':jme3-lwjgl:' + jmeversion
    compile jmerepo + ':jme3-jogg:' + jmeversion
    testCompile 'junit:junit:4.11'
 
}

sourceSets{
main {   
    resources {
        srcDir 'build/natives/'
    }
}


test {   
    java{
        srcDir "src/test/unit"
    }
    resources {
        srcDir 'build/natives/'
    }
}

}

task downloadResources(type: Exec){
    commandLine 'bash','prepare.sh',"downloadResources"
}    

task prepareWorkspace(type:Exec){
    commandLine 'bash','prepare.sh','prepareWorkspace'
}

downloadResources.dependsOn(prepareWorkspace)


task buildNativeTests(type :Exec){
    commandLine 'bash','prepare.sh',"buildNativeTests"
}
buildNativeTests.dependsOn(prepareWorkspace)

task updateJNIHeaders(type:Exec) {
    def javapth=project.sourceSets.main.java.outputDir
    def classpath = configurations.compile.join(":")+ ":"+javapth;
    commandLine 'bash','prepare.sh',"updateJNIHeaders",classpath,javapth,"src/main/natives/include"
}
updateJNIHeaders.dependsOn(classes)

task deepClean(type:Exec){
    commandLine 'bash','prepare.sh',"deepClean"
}
deepClean.dependsOn(clean);


task buildNatives(type :Exec){
    commandLine 'bash','prepare.sh',"buildNatives"
}
buildNatives.dependsOn(prepareWorkspace)


build.dependsOn(buildNatives)

task buildStandaloneTests(type: Jar) {

    from sourceSets.test.output
    manifest {
        attributes 'Main-Class': 'tests.TestPhononRenderer'
    }
    from {
        configurations.testCompile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.testRuntime.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    baseName = project.name + '-testFat'
      with jar 
}

task deploy (type :Exec) {
        commandLine 'bash','prepare.sh',"deploy"

}
deploy.dependsOn(build);