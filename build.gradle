import org.gradle.plugins.ide.eclipse.model.AccessRule

apply plugin : 'java' 
apply plugin: 'eclipse'
apply plugin: 'maven'


group = "com.jme3.phonon"
version= project.hasProperty('in_version') ? project.getProperty('in_version') : '-SNAPSHOT'

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

def jmerepo='com.github.jMonkeyEngine.jmonkeyengine'
def jmeversion='025b27c96d295e02c1471580980c7f4429be44b5'


eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('accessible', 'com/**'))
                jre.accessRules.add(new AccessRule('accessible', '**'))
                jre.accessRules.add(new AccessRule('accessible', 'sun/**'))           
             }
        }
    }
}



javadoc {
  source = sourceSets.main.allJava
  classpath = configurations.compileClasspath
}

task packageSource(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task packageJavadoc(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}





repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }    
}

dependencies {
    compileOnly jmerepo + ':jme3-core:' + jmeversion
    compileOnly jmerepo + ':jme3-desktop:' + jmeversion
    compileOnly jmerepo + ':jme3-lwjgl:' + jmeversion
    compileOnly jmerepo + ':jme3-jogg:' + jmeversion
    testCompile 'junit:junit:4.11'
 }

sourceSets{
    main {   
        resources {
            srcDir 'tmp/natives/'
        }
    }


    test {   
        java{
            srcDir "src/test/unit"
        }

    }

}

task downloadResources(type: Exec){
    commandLine 'bash','build.sh',"downloadResources"
}    

task prepareWorkspace(type:Exec){
    commandLine 'bash','build.sh','prepareWorkspace'
}



task updateJNIHeaders(type:Exec) {
    def javapth=project.sourceSets.main.java.outputDir
    def sep= ""+java.io.File.pathSeparatorChar;
    def classpath = configurations.compileOnly.join(sep)+ sep+javapth;
    commandLine 'bash','build.sh',"updateJNIHeaders",classpath,javapth,"src/main/natives/include"
}

task deepClean(type:Exec){
    commandLine 'bash','build.sh',"deepClean"
}


task buildNatives(type :Exec){
    commandLine 'bash','build.sh',"buildNatives"
}


task buildStandaloneTests(type: Jar) {

    from sourceSets.test.output
    manifest {
        attributes 'Main-Class': 'tests.TestPhononRenderer'
    }
    from {
        configurations.testCompile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.testRuntime.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    baseName = project.name + '-testFat'
      with jar 
}



downloadResources.dependsOn(prepareWorkspace)
updateJNIHeaders.dependsOn(classes)
deepClean.dependsOn(clean);
clean.finalizedBy(cleanEclipse)


artifacts {
    archives packageSource
}
